// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// assets statically implements the virtual filesystem provided to vfsgen.
var assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 1, 22, 23, 58, 21, 363489855, time.UTC),
		},
		"/definitions": &vfsgen۰DirInfo{
			name:    "definitions",
			modTime: time.Date(2020, 1, 7, 0, 17, 1, 344216973, time.UTC),
		},
		"/definitions/389.yaml": &vfsgen۰CompressedFileInfo{
			name:             "389.yaml",
			modTime:          time.Date(2020, 1, 7, 0, 17, 1, 200216259, time.UTC),
			uncompressedSize: 6842,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x99\x5f\x6f\x1b\x37\x12\xc0\xdf\xfd\x29\x06\x4a\xd1\xd8\x39\xcb\x58\xc9\x91\xff\x2c\xaa\x87\xe2\x5c\xe0\x0a\x24\x45\xd1\xa2\xf7\xe0\x24\x10\x46\xe4\x48\xe2\x95\x4b\xae\xc9\x59\x45\xaa\x9a\xef\x7e\xe0\x6a\x25\xad\xfe\xad\x68\x27\x40\x13\x20\xb6\xa8\x1f\x87\x9c\xe1\xcc\x70\x86\x69\x83\xc1\x8c\x52\xc8\xac\x51\x6c\xdd\x19\x80\x27\x74\x62\x92\xc2\x6b\x61\xfa\xef\x97\xa3\xaf\xcf\x00\x46\x4a\x33\xb9\x14\x5e\x9f\x0b\xd3\xaf\xe8\x8b\xf0\x05\x32\x3b\x35\x2c\x98\x7c\x7a\x06\x00\x90\x11\x3b\x25\xaa\x0f\x00\x3c\x71\x84\x72\xfd\x11\x80\xe7\x39\xa5\x30\xc6\x62\x4c\xd5\x98\x28\x9c\x23\xc3\xc2\x1a\x43\x82\x95\x35\xdf\x90\x66\xcb\xa8\x5f\x2c\x19\x39\xc3\x59\x84\x06\x1b\x2a\x27\x17\xe6\x4f\x14\x37\x4e\x90\x8c\x43\x4d\x5e\xfd\x45\x4d\x54\x90\xf8\x19\x15\x93\x6b\x14\x66\x73\xaf\x8c\x62\x85\x4c\x72\x97\x13\xb6\x30\x4c\x6e\x43\x0a\x9b\xe5\x9a\x4e\x92\x64\xd8\x29\xf2\x9e\x0c\x37\x83\xc3\x39\xc7\x60\x66\x88\xe2\x4f\x32\xcd\x66\x9c\x92\xf3\xca\x9a\x0d\xb2\xf4\xa5\xc1\xd2\x45\x3d\xb9\x29\xb9\x41\x05\x35\xae\x06\xa0\x71\x48\xda\xa7\xf0\xa1\xc2\x3f\xad\xbf\x79\x05\xd6\xe8\x39\x58\x43\x30\x45\x5d\x10\x08\x34\x40\x53\x72\x30\x24\x70\xc4\x85\x33\x24\x37\xd2\x1d\x1a\xaf\x91\xad\x4b\xe1\xef\xf5\x28\x40\x7b\xb5\x42\x6d\xac\xae\x02\x2c\x16\xa0\x8c\xa4\x19\x5c\x95\xab\x78\x48\xe0\xcb\x97\x2d\xb8\x1c\x4f\xa1\x53\x0d\x7a\x46\xc7\xac\x82\xa6\xdf\x87\x1f\x03\x61\xcd\x61\x5d\xeb\x26\x0b\xfa\xd0\x0c\xc3\x99\x82\xf2\xd0\x4d\x3a\x77\x49\x27\xb9\xee\x76\x3a\x37\x6f\xbb\x8f\x97\x27\xf5\x58\x2c\xc0\xa1\x19\x13\x7c\xb7\x34\x46\xda\x5f\x6f\x78\x6b\xbb\xed\xd5\x76\x17\x0b\x38\x67\xfb\x80\x4c\x70\x05\xad\x6e\x92\xdc\x24\x9d\xa4\xdb\xe9\x25\x6f\x93\xde\x63\xeb\xe2\xea\x0f\xa3\x66\xdb\x53\x17\x0b\x20\x23\x37\x63\x55\x98\x2d\x55\x7d\x73\x58\xd5\x4d\x0c\x36\xf9\xcb\x8e\x83\x6c\x26\x0d\x64\xe1\x90\xeb\x96\x5b\xfb\x83\x92\x97\x30\x54\x46\x7e\xda\x37\x60\xed\x30\x5f\xd5\x77\x00\xf7\xbd\xb4\x9b\x74\x6e\x3b\x9d\xee\x7d\xe7\xb6\x77\xdf\xbd\x7b\x4c\xdf\xde\xdd\x77\x6f\xaa\x7f\xdb\xa9\x30\xfd\x07\xe5\x48\xb0\x75\x73\x78\x8f\x06\xc7\xe4\xd2\x24\xfc\x3d\x26\xf1\x26\xad\x1d\x55\x2f\xb9\x7d\x4c\xef\xd2\xbb\xb4\x9d\x8e\x9e\xa4\xe9\x8f\xf0\x4f\x6a\x1b\x2b\xe9\xca\x11\xea\xec\xca\xba\xf1\xa5\x30\xfd\x10\xba\x45\x48\x06\xe1\x03\x8a\xd2\xe5\xfd\xa5\x14\x25\x1f\x7e\x96\x74\xf8\xc5\xba\x71\xf3\xf2\xb7\x4b\x85\xba\xdd\xbb\xce\xed\x75\x12\x96\xbf\x4e\xaf\x5f\xa4\xc8\x5d\x4d\x52\xf7\xfe\xfa\xe6\x31\xed\xa5\xbd\x58\x49\x2b\xcf\x5d\xdf\x21\x29\xdc\xbc\xdd\xb3\xf5\x4d\x1a\x69\xe3\xaf\x75\xf2\x92\xfc\xac\x78\x02\x3e\xd7\x8a\xdf\x29\xcf\xd0\x4a\x5b\xab\x69\x3b\xec\xb1\x14\x00\xa0\x64\x3d\xfe\xf7\x23\x3f\xfc\x09\x3e\xb8\x45\xf5\xf6\xa9\x5a\xc8\xad\xa8\x0e\xfc\x0d\x55\xf8\x45\x05\xdf\x7e\xf8\xad\xc6\xb4\xdf\xd3\xe8\xc3\xa7\x83\x61\x7b\xb6\x53\x24\x0c\x7c\x66\xf2\x9d\x4a\xc1\x9b\x2c\xbf\xdc\x54\x06\x11\x85\x01\x1a\x6b\xe6\x99\x2d\x7c\xb0\xc4\xde\xb5\xb0\x9d\xcf\x0b\x83\x05\x4f\x22\x40\xaf\x82\x3f\xc5\xc2\xec\xac\x19\x47\xc2\x25\x42\xa2\x70\x8a\xe7\xe4\x9c\xdd\xbf\x92\xb7\x79\x65\x6c\x7e\x02\x09\xd7\xfb\x49\x28\x04\x3d\x3a\x3a\xc9\xa1\x94\xe1\xce\x9e\x47\xac\x9a\xd9\x29\xc5\xb1\x99\x95\x6a\x34\x7f\x0e\xeb\xe4\x69\xbd\xb5\xf2\x7c\x12\x5a\x3a\xd7\x49\xcc\x1a\xd2\x34\x0d\xce\x1c\x85\x7f\x9e\x58\x4d\xbe\x18\xb2\x23\x8a\x9c\xe2\x68\x44\xce\xa1\x3e\x75\x4e\x13\x54\x46\x99\xf1\x49\xb5\xe2\x5d\x28\x86\x69\x28\x6d\x8f\x82\xf4\x14\x8d\x2a\x73\xbc\x00\x3e\x3a\x69\x33\xa5\x44\x22\xea\x47\x47\x62\xfa\x4d\xca\xcc\xaa\x6c\x5d\x95\x71\x91\x27\x1b\x87\x67\xe8\x99\x5c\xb5\x42\x63\x1f\x61\xf3\x79\x0c\x86\x62\x42\xb1\xdc\xa1\x86\x62\xc7\xb3\x34\x4e\x1b\xb1\x90\xc7\xbf\xd7\x72\x98\x0d\x24\x8d\xca\x86\xa1\xac\x8f\x96\xa9\xbd\x1c\x77\xd6\xf2\x4e\x5e\xaf\xf2\x79\x48\xed\x85\x27\xf7\x9b\xb5\x1c\x7e\x0f\x38\x48\x64\x1c\xa2\xa7\x30\x90\xeb\x62\xac\x8c\x5f\x96\x29\x66\xa4\xc6\x11\x37\x40\x99\xff\x8c\x9e\x37\x29\x5f\xe6\x9e\x48\x0b\x6c\xd8\x83\x36\x3d\x06\x4f\x14\x97\xc5\x62\x44\x6b\xb8\x99\x74\xaa\x75\xcb\x70\x16\x0f\xef\x49\x3f\x18\x37\x47\xc5\xef\xd0\xaf\xaa\xbe\x46\x79\x28\x7c\x81\x5a\xcf\xa1\xdd\x81\x91\x75\xe0\x6d\x16\x5a\x1c\xf4\xd6\x5c\x35\x08\x97\x26\xd2\xe0\x15\x18\x61\xed\x8d\xc8\x58\x53\x57\x33\x22\xec\x1c\x49\x6e\xcb\x8d\xb1\xf0\x61\xf4\xab\xcd\x6b\xac\xcb\x50\xab\xbf\x48\xc6\xdb\x6f\x6f\xce\xe9\xc3\xd9\x9b\x92\x29\xef\x5f\xb2\x4e\xec\x89\xed\xcd\x8d\x38\xbb\x67\xcf\x39\xb6\x56\xc3\x79\x9e\xb5\xe1\x87\x1f\x52\x78\xd3\x98\xfa\xc4\x24\x34\x08\xda\x8e\xbf\x5d\xfe\x5b\x97\xcd\x8e\x72\xad\xc4\xaa\x1f\x5d\x49\x5f\x93\x5b\x8f\x6b\x76\xf8\x3f\x12\xfc\x6f\x8d\xde\xf7\x8d\x97\xbe\x57\x9b\x8c\x63\x47\x94\x91\xe1\xf2\xdd\xcd\x0b\x1b\x74\xac\x8a\x99\x03\xd9\x76\xbb\x3b\x79\x05\x3c\x51\x3e\x78\x2d\x4f\x08\x42\xa6\x07\x9e\x20\x87\x81\xd5\x12\x24\x01\x85\xb3\xde\x2f\x51\xb6\xb9\xb6\xe3\x79\x0a\x52\xf4\xab\x46\x2d\xf4\x96\xc2\x66\xa5\xb7\x57\x43\x2b\xc7\xf1\x0f\xbf\xf7\x7e\x5b\x0a\x0a\x46\x5a\x6b\xbd\xba\x54\x76\xa1\xff\x58\x5f\x83\x26\xd6\xf3\xa1\x2b\xa2\x6e\x82\x77\xe8\xf9\x8f\x5c\x22\xd3\x4f\x66\xef\xaa\xde\x7e\x16\x98\x90\xce\x53\x28\x42\x37\xc4\x2a\x23\xcf\x98\xe5\x60\x47\xa5\xea\x1a\x3d\x43\x51\xca\x01\x4f\x64\x00\x8d\x04\xcc\x73\xad\x48\x96\x8a\x95\x66\x09\x1b\xaa\x05\xf1\xd1\x57\xa0\xfd\x16\x6d\xfd\xdc\x13\xdf\xa8\xbd\x50\xcb\x7f\x64\x57\xbf\x33\xba\xc6\xc4\xf9\xcf\xed\x8b\x8b\xc6\x3a\xaa\xf6\x08\xc4\x34\xe3\x03\x0f\x40\x69\xb3\x6c\xf8\x29\x14\xe4\x70\x9e\x5c\x40\xe5\xc4\x80\xe2\xa9\x50\x8e\x24\xf8\x42\x08\xf2\x7e\x54\x68\x3d\x4f\xe1\x67\x23\x5c\x19\xa9\xa8\xd7\xae\x16\x00\x92\x5f\xf1\xb4\x18\x36\x5d\xda\xee\xa9\xb0\x4c\x95\xe9\x8e\x3c\x2a\x2e\x16\xe0\x68\x4c\xb3\xb0\x4f\x14\xf4\xa3\xd6\xd0\x5a\xee\xfe\xe3\xc7\xf3\xf3\x0f\x49\xfb\xfe\xd3\xbf\x2e\x3e\x7e\xbc\x80\xab\x37\xad\x95\xa4\xd6\x77\x8b\xce\x97\xd6\x61\x3b\x3b\xc2\x1c\x05\xab\xe9\x91\xe4\x7c\x22\xd7\xbd\xae\xff\x0f\xc2\x56\x8e\x63\x9b\x5f\x6c\x92\x59\xc8\xa6\xa7\xeb\xc6\x10\xc1\x85\xdf\x7b\x19\xdc\xbe\xc9\x46\xca\x79\x5e\x66\x75\x53\x64\x43\x72\x27\x7a\x52\x7c\x0e\xad\x72\x7c\xb0\x19\x2a\xf3\x2e\xf4\x9e\x47\xde\xab\x97\xd9\x7d\xb0\xcd\x36\x5b\x2f\xb7\x5e\xcd\x06\x4a\xfa\x9d\x5b\xe8\xd7\x30\x0e\x3f\x3f\x94\xf7\xcb\x83\xf2\x95\x79\x24\xfc\x52\x64\xe4\x94\x80\x1f\xbd\x57\x63\x13\x3c\x0e\x7e\x2d\x6f\xa2\xa3\x35\xf9\xb3\x2c\x2d\x0d\xbe\xc7\xd9\x7f\x4b\x9f\x3a\xac\xe4\x7a\xc7\x83\x0c\x67\x83\xd2\x91\x1a\x2b\x4b\xfc\x85\x66\x1c\x27\xd0\xd0\x8c\x1b\x24\xfe\x3f\x00\x00\xff\xff\x22\xea\x81\xd5\xba\x1a\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/definitions"].(os.FileInfo),
	}
	fs["/definitions"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/definitions/389.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
