// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// assets statically implements the virtual filesystem provided to vfsgen.
var assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2018, 7, 27, 22, 7, 32, 933020863, time.UTC),
		},
		"/definitions": &vfsgen۰DirInfo{
			name:    "definitions",
			modTime: time.Date(2018, 7, 27, 21, 56, 59, 115910435, time.UTC),
		},
		"/definitions/389.yaml": &vfsgen۰CompressedFileInfo{
			name:             "389.yaml",
			modTime:          time.Date(2018, 7, 27, 21, 56, 59, 115910435, time.UTC),
			uncompressedSize: 6533,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x99\xdf\x6f\x13\x3f\x12\xc0\xdf\xfb\x57\x8c\x52\x44\x5b\xae\xa9\x36\x69\xd3\x1f\x2b\xf2\x70\xba\x22\xdd\x49\xf0\x02\xe2\xa5\xb4\xaa\x26\xde\x49\xe2\xc3\x6b\x6f\xed\xd9\xd0\x10\xf8\xdf\xbf\xf2\x66\x93\x6c\x7e\xed\x9a\x82\x04\x48\xb4\x71\x3e\x1e\x7b\xc6\x33\xe3\x19\xd3\x06\x8d\x29\xc5\x90\x1a\x2d\xd9\xd8\x03\x00\x47\x68\xc5\x38\x86\x23\xa1\xfb\x1f\xe6\xa3\x47\x07\x00\x43\xa9\x98\x6c\x0c\x47\xc7\x42\xf7\x4b\xfa\xc4\x7f\x81\xcc\x56\x0e\x72\x26\x17\x1f\x00\x00\xa4\xc4\x56\x8a\xf2\x03\x00\x8f\x2d\x61\xb2\xfc\x08\xc0\xd3\x8c\x62\x18\x61\x3e\xa2\x72\x4c\xe4\xd6\x92\x66\x61\xb4\x26\xc1\xd2\xe8\x3f\x48\xb3\x61\x54\x2f\x96\x8c\x9c\xe2\x73\x80\x06\x2b\x2a\x23\xeb\xe7\x8f\x25\xd7\x4e\x48\x18\x07\x8a\x9c\xfc\x4e\x75\x94\x97\xf8\x0d\x25\x93\xad\x15\x66\x32\x27\xb5\x64\x89\x4c\xc9\x26\x27\x4c\xae\x99\xec\x8a\x14\x26\xcd\x14\x35\x92\xa4\xd9\x4a\x72\x8e\x34\xd7\x83\x83\x29\x87\x60\x7a\x80\xe2\x2b\xe9\x7a\x33\x4e\xc8\x3a\x69\xf4\x0a\x99\xfb\xd2\xe3\xdc\x45\x1d\xd9\x09\xd9\xc7\x12\xaa\x5d\x0d\x40\xe1\x80\x94\x8b\xe1\x4b\x89\x3f\x2c\xbf\x39\x04\xa3\xd5\x14\x8c\x26\x98\xa0\xca\x09\x04\x6a\xa0\x09\x59\x18\x10\x58\xe2\xdc\x6a\x4a\x56\xd2\x2d\x6a\xa7\x90\x8d\x8d\xe1\xc7\x72\x14\xa0\xbd\x58\xa1\x32\x56\x55\x01\x66\x33\x90\x3a\xa1\x67\x38\x2b\x56\x71\x10\xc1\xcf\x9f\x6b\x70\x31\x1e\x43\xa7\x1c\x74\x8c\x96\x59\x7a\x4d\x5f\xfb\x1f\x8f\xc2\xe8\xdd\xba\x56\x4d\xe6\xf5\xa1\x67\xf4\x67\x0a\xd2\x41\x37\xea\x5c\x47\x9d\xe8\xbc\xdb\xe9\x5c\x5e\x74\xef\x4e\x1b\xf5\x98\xcd\xc0\xa2\x1e\x11\xbc\x9a\x1b\x23\xee\x2f\x37\xbc\xb6\xdd\xf6\x62\xbb\xb3\x19\x1c\xb3\xb9\x45\x26\x38\x83\x56\x37\x8a\x2e\xa3\x4e\xd4\xed\xf4\xa2\x8b\xa8\x77\xd7\x3a\x39\xfb\xac\xe5\xf3\xfa\xd4\xd9\x0c\x48\x27\xab\xb1\x32\xcc\xe6\xaa\xbe\xd9\xad\xea\x2a\x06\xeb\xfc\x65\xc3\x41\x56\x93\x1e\x93\xdc\x22\x57\x2d\xb7\xf4\x07\x99\x9c\xc2\x40\xea\xe4\x61\xdb\x80\x95\xc3\x3c\xac\xee\x00\x6e\x7a\x71\x37\xea\x5c\x75\x3a\xdd\x9b\xce\x55\xef\xa6\x7b\x7d\x17\x5f\x5c\xdf\x74\x2f\xcb\x7f\xdb\xb1\xd0\xfd\x5b\x69\x49\xb0\xb1\x53\xf8\x80\x1a\x47\x64\xe3\xc8\xff\xdd\x27\xf1\x32\xae\x1c\x55\x2f\xba\xba\x8b\xaf\xe3\xeb\xb8\x1d\x0f\x9f\x12\xdd\x1f\xe2\x57\x6a\x6b\x93\xd0\x99\x25\x54\xe9\x99\xb1\xa3\x53\xa1\xfb\x3e\x74\x73\x9f\x0c\xfc\x07\x14\x85\xcb\xbb\xd3\x44\x14\xbc\xff\x59\xd0\xfe\x17\x63\x47\xf5\xcb\x5f\xcd\x15\xea\x76\xaf\x3b\x57\xe7\x91\x5f\xfe\x3c\x3e\x7f\x91\x22\xd7\x15\x49\xdd\x9b\xf3\xcb\xbb\xb8\x17\xf7\x42\x25\x2d\x3c\x77\x79\x87\xc4\x70\x79\xb1\x65\xeb\xcb\x38\xd0\xc6\xbf\xeb\xe4\x05\xf9\x4d\xf2\x18\x5c\xa6\x24\xbf\x97\x8e\xa1\x15\xb7\x16\xd3\x36\xd8\x7d\x29\x00\x40\x26\xd5\xf8\xdf\x8e\x7c\xff\xc7\xfb\xe0\x1a\xd5\xdb\xa6\x2a\x21\xb7\xa0\x3a\xf0\x03\xca\xf0\x0b\x0a\xbe\xed\xf0\x5b\x8c\x29\xb7\xa5\xd1\x97\x87\x9d\x61\x7b\xb0\x51\x24\x3c\xba\x54\x67\x1b\x95\x82\xd3\x69\x76\xba\xaa\x0c\x02\x0a\x03\xd4\x46\x4f\x53\x93\x3b\x6f\x89\xad\x6b\x61\x3d\x9f\xe7\x1a\x73\x1e\x07\x80\x4e\x7a\x7f\x0a\x85\xd9\x1a\x3d\x0a\x84\x0b\x84\x44\x6e\x25\x4f\xc9\x5a\xb3\x7d\x25\xaf\xf3\x52\x9b\xac\x01\xf1\xd7\x7b\x23\xe4\x83\x1e\x2d\x35\x72\x98\x24\xfe\xce\x9e\x06\xac\x9a\x9a\x09\x85\xb1\xa9\x49\xe4\x70\xfa\x2b\xac\x4d\x9a\xf5\x56\xd2\x71\x23\x34\x77\xae\x46\xcc\x68\x52\x34\xf1\xce\x1c\x84\x7f\x1b\x1b\x45\x2e\x1f\xb0\x25\x0a\x9c\x62\x69\x48\xd6\xa2\x6a\x3a\xa7\x31\x4a\x2d\xf5\xa8\x51\xad\x70\x17\x0a\x61\x6a\x4a\xdb\xbd\x20\x3d\x05\xa3\x52\xef\x2f\x80\xf7\x4e\x5a\x4d\x29\x90\x80\xfa\xd1\x92\x98\xfc\x91\x32\xb3\x2c\x5b\x17\x65\x5c\xe0\xc9\x86\xe1\x29\x3a\x26\x5b\xae\x50\xdb\x47\x98\x6c\x1a\x82\xa1\x18\x53\x28\xb7\xab\xa1\xd8\xf0\x2c\x85\x93\x5a\xcc\xe7\xf1\xd7\x2a\x19\xa4\x8f\x09\x0d\x8b\x86\xa1\xa8\x8f\xe6\xa9\xbd\x18\xb7\xc6\xf0\x46\x5e\x2f\xf3\xb9\x4f\xed\xb9\x23\xfb\xd1\x18\xf6\xbf\x7b\x1c\x12\x64\x1c\xa0\x23\x3f\x90\xa9\x7c\x24\xb5\x9b\x97\x29\x7a\x28\x47\x01\x37\x40\x91\xff\xb4\x9a\xd6\x29\x5f\xe4\x9e\x40\x0b\xac\xd8\x9d\x36\xdd\x07\x8f\x25\x17\xc5\x62\x40\x6b\xb8\x9a\xd4\xd4\xba\xa5\xf8\x1c\x0e\x6f\x49\xdf\x19\x37\x7b\xc5\x6f\xd0\x87\x65\x5f\x23\x1d\xe4\x2e\x47\xa5\xa6\xd0\xee\xc0\xd0\x58\x70\x26\xf5\x2d\x0e\x3a\xa3\xcf\x6a\x84\x27\x3a\xd0\xe0\x25\x18\x60\xed\x95\xc8\x50\x53\x97\x33\x02\xec\x1c\x48\xae\xcb\x0d\xb1\xf0\x6e\xf4\xb7\xcd\xab\x8d\x4d\x51\xc9\xef\x94\x84\xdb\x6f\x6b\x4e\xf3\xe1\x6c\x4d\x49\xa5\x73\x2f\x59\x27\xf4\xc4\xb6\xe6\x06\x9c\xdd\x2f\xcf\xd9\xb7\x56\xcd\x79\x1e\xb4\xe1\xed\xdb\x18\xde\xd4\xa6\x3e\x31\xf6\x0d\x82\x32\xa3\x3f\x97\xff\x96\x65\xb3\xa5\x4c\x49\xb1\xe8\x47\x17\xd2\x97\xe4\xda\xe3\x9a\x19\xfc\x9f\x04\xff\x47\xa1\x73\x7d\xed\x12\xd7\xab\x4c\xc6\x91\x25\x4a\x49\x73\xf1\xee\xe6\x84\xf1\x3a\x96\xc5\xcc\x8e\x6c\xbb\xde\x9d\x1c\x02\x8f\xa5\xf3\x5e\xcb\x63\x02\x9f\xe9\x81\xc7\xc8\x7e\x60\xb1\x04\x25\x80\xc2\x1a\xe7\xe6\x28\x9b\x4c\x99\xd1\x34\x86\x44\xf4\xcb\x46\xcd\xf7\x96\xc2\xa4\x85\xb7\x97\x43\x0b\xc7\x71\xb7\x9f\x7a\x1f\xe7\x82\xbc\x91\x96\x5a\x2f\x2e\x95\x4d\xe8\xbf\xc6\x55\xa0\xb1\x71\xbc\xeb\x8a\xa8\x9a\xe0\x3d\x3a\xfe\x9c\x25\xc8\xf4\x4e\x6f\x5d\xd5\xeb\xcf\x02\x63\x52\x59\x0c\xb9\xef\x86\x58\xa6\xe4\x18\xd3\x0c\xcc\xb0\x50\x5d\xa1\x63\xc8\x0b\x39\xe0\x88\x34\xa0\x4e\x00\xb3\x4c\x49\x4a\x0a\xc5\x0a\xb3\xf8\x0d\x55\x82\x78\xef\x2b\xd0\x76\x8b\xb6\x7c\xee\x09\x6f\xd4\x5e\xa8\xe5\x5f\xd9\xd5\x27\x46\x5b\x9b\x38\xff\xde\xbe\x38\xaf\xad\xa3\x2a\x8f\x40\x4c\xcf\xbc\xe3\x01\x28\xae\x97\x0d\xef\x7c\x41\x0e\xc7\xd1\x09\x94\x4e\x0c\x28\x9e\x72\x69\x29\x01\x97\x0b\x41\xce\x0d\x73\xa5\xa6\x31\xfc\x4f\x0b\x5b\x44\x2a\xaa\xa5\xab\x79\x80\x92\xdf\x78\x5a\xf4\x9b\x2e\x6c\xf7\x94\x1b\xa6\xd2\x74\x7b\x1e\x15\x67\x33\xb0\x34\xa2\x67\xbf\x4f\x14\xf4\x6f\xa5\xa0\x35\xdf\xfd\xfd\xfd\xf1\xf1\x97\xa8\x7d\xf3\xf0\xaf\x93\xfb\xfb\x13\x38\x7b\xd3\x5a\x48\x6a\xbd\x9a\x75\x7e\xb6\x76\xdb\xd9\x12\x66\x28\x58\x4e\xf6\x24\xe7\x86\x5c\x77\x54\xfd\x1f\x84\xb5\x1c\xc7\x26\x3b\x59\x25\x33\x9f\x4d\x9b\xeb\x46\x1f\xc1\xb9\xdb\x7a\x19\x5c\xbf\xc9\x86\xd2\x3a\x9e\x67\x75\x9d\xa7\x03\xb2\x0d\x3d\x29\xfe\x0a\x2d\x33\xbc\x35\x29\x4a\xfd\xde\xf7\x9e\x7b\xde\xab\xe7\xd9\xfd\x71\x9d\xdd\x69\xbd\x7f\x02\x00\x00\xff\xff\xe9\xb5\x44\xdb\x85\x19\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/definitions"].(os.FileInfo),
	}
	fs["/definitions"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/definitions/389.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr: gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
